service: sismo-vault
frameworkVersion: "3"
useDotenv: true

package:
  individually: true

custom:
  profiles:
    dev: local
    staging: staging-common
    prod: prod-common
    prod-beta: prod-common
    staging-beta: staging-common
    dev-beta: prod-common
  provisionedConcurrency:
    dev: 0
    staging: 0
    prod: 3
    prod-beta: 3
    dev-beta: 3
    staging-beta: 3
  DB:
    dev:
      tableNamePrefix: SismoVaultLocal
      region: eu-west-1
      readCapacity: 3
      writeCapacity: 3
    staging:
      tableNamePrefix: SismoVaultStaging
      region: eu-west-1
      readCapacity: 3
      writeCapacity: 3
    prod:
      tableNamePrefix: SismoVaultProd
      region: eu-west-1
      readCapacity: 10
      writeCapacity: 40
    prod-beta:
      tableNamePrefix: SismoVaultProdBeta
      region: eu-west-1
      readCapacity: 10
      writeCapacity: 40
    dev-beta:
      tableNamePrefix: SismoVaultDevBeta
      region: eu-west-1
      readCapacity: 3
      writeCapacity: 3
    staging-beta: 
      tableNamePrefix: SismoVaultStagingBeta
      region: eu-west-1
      readCapacity: 3
      writeCapacity: 3 
  cors:
    dev:
      - http://localhost:3000
    staging:
      - "*"
    prod:
      - https://alpha.sismo.io
      - https://app.sismo.io
      - https://playground.sismo.io
      - https://testnets.sismo.io
      - https://staging.sismo.io
      - https://staging.vault-beta.sismo.io
      - https://vault-beta.sismo.io
    prod-beta:
      - "*"
    staging-beta:
      - "*"
    dev-beta:
      - "*"
  
  webpack:
    packager: "yarn" # Packager that will be used to package your external modules
    includeModules: true # enable auto-packing of external modules
  serverless-offline:
    httpPort: 4000

  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    start:
      docker: true
      port: 8000
      inMemory: true
      migrate: true
      convertEmptyValues: true

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 512 # optional, in MB, default is 1024
  timeout: 29 # 29 seconds, default is 6
  profile: ${self:custom.profiles.${sls:stage}}
  region: eu-west-1
  httpApi:
    cors:
      allowedOrigins: ${self:custom.cors.${sls:stage}}
  environment:
    TABLE_NAME_PREFIX: ${self:custom.DB.${sls:stage}.tableNamePrefix}
    NODE_ENV: ${sls:stage}
    LOG: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [vault, Arn]

functions:
  getApi:
    handler: src/vault/handlers/api-handler.get
    events:
      - httpApi:
          path: /retrieve
          method: GET
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${sls:stage}}
  postApi:
    handler: src/vault/handlers/api-handler.post
    events:
      - httpApi:
          path: /add
          method: POST

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

resources:
  Resources:
    vault:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.DB.${sls:stage}.tableNamePrefix}Vault
        AttributeDefinitions: ${file(./src/vault/schema.db.json):AttributeDefinitions}
        KeySchema: ${file(./src/vault/schema.db.json):KeySchema}
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.DB.${sls:stage}.readCapacity}
          WriteCapacityUnits: ${self:custom.DB.${sls:stage}.writeCapacity}
